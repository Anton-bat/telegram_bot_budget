{"code": "import json\nimport logging \nfrom datetime import datetime, timedelta\nfrom telegram import Update\nfrom telegram.ext import ApplicationBuilder, CallbackContext, CommandHandler\n\nwith open('own_budget.py', 'r') as file:\n    code = file.read()\ncode_data = {'code': code}\nwith open('code.json', 'w') as json_file:\n    json.dump(code_data, json_file)\n\nTOKEN_BOT = \"6892967840:AAHf3E8UkfY0LodhYUPrnQW0zv6jp_uDy0A\"\n\nuser_incomes = {}\nuser_expences = {}\n\nexpence_list = ['relax', 'cinema', 'food', 'events', 'else']\nincome_list = []\nlogging.basicConfig(\n        format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n        level=logging.INFO\n    )\n\nclass Expences:\n    def __init__(self, amount: float, category: str, date: datetime):\n        self.amount = amount\n        self.category = category\n        self.date = date\n\nclass Incomes:\n    def __init__(self, amount: float, category: str, date: datetime):\n        self.amount = amount\n        self.category = category\n        self.date = date\n\n    \nasync def start(update: Update, context: CallbackContext) -> None:\n    logging.info(\"start pressed\")\n    await update.message.reply_text(\n        \"Welcome to my Own_budget Bot!\\n\"\n        \"Commands:\\n\"\n        \"Outcomes categories with expences: /out_cat <out_categories>\\n\"\n        \"Create income categories: /inc_cat <create_category>\\n\"\n        \"Adding incomes: /add_inc <income>\\n\"\n        \"List of outcomes: /list\\n\"\n        \"View in/out costs during period: /view <view> [|<period>]\\n\"\n        \"Remove record: /remove <cost number>\\n\"\n        \"Statistic: /stats <stats>\\n\"\n    )\n\nasync def show_expense_category(update: Update, context: CallbackContext) -> None:\n    exp_categories = \"\\n\".join(expence_list)\n    await update.message.reply_text(f'You have follow expence categories:\\n {exp_categories}')\n\nasync def add_expense(update: Update, context: CallbackContext) -> None:\n    user_id = update.message.from_user.id\n    args = context.args\n    try:\n        if len(args) < 2:\n            await update.message.reply_text(\"Please give amount and category in one message\")\n        amount = float(args[0])\n        category = \" \".join(args[1:])\n        date = datetime.now()\n        if not user_expences.get(user_id):\n            user_expences[user_id] = []\n        expences = Expences(amount, category, date)\n        user_expences[user_id].append(expences)\n        update.message.reply_text(f\"Expences {amount} added to {category} successfully\")\n    except (ValueError, IndexError):\n        update.message.reply_text(\"Invalid command. Please use /add_expense <amount> <category>\")\n\n\nasync def add_income(update: Update, context: CallbackContext) -> None:\n    user_id = update.message.from_user.id\n    args = context.args\n    try:\n        if len(args) < 2:\n            await update.message.reply_text(\"Please give amount and category in one message\")\n        amount = float(args[0])\n        category = args[1]\n        date = datetime.now()\n        incomes = Incomes(amount, category, date)\n        if category not in expence_list:\n            await update.message.reply_text(f\"No such expences list, creating income income {category}\")\n            income_list.append(category)\n        user_incomes.append(incomes)\n        update.message.reply_text(f\"Income {amount} added to {category} successfully\")\n    except (ValueError, IndexError):\n        update.message.reply_text(\"Invalid command. Please use /add_income <amount> <category>\")    \n\n\n        \nasync def list_expences_category(update: Update, context: CallbackContext) -> None:\n    user_id = update.message.from_user.id\n\n    if not user_expences.get(user_id):\n        await update.message.reply_text(\"You dont have any inputs\")\n        return\n    result = \"\\n\".join([f'Your expences:\\n {i + 1}, {t}, Category: {user_expences['category']}' for i, t in enumerate(user_expences[user_id])])\n    await update.message.reply_text(result)\n\nasync def list_income_category(update: Update, context: CallbackContext) -> None:\n    user_id = update.message.from_user.id\n\n    if not user_incomes.get(user_id):\n        await update.message.reply_text(\"You dont have any inputs\")\n        return\n    \n    result = \"\\n\".join([f'Your incomes:\\n {i + 1}, {t}, Category: {user_incomes['category']}' for i, t in enumerate(user_incomes[user_id])])\n    await update.message.reply_text(result)\n\nasync def filtered_expences(update: Update, context: CallbackContext) -> None:\n    user_id = update.message.from_user.id\n    start_date = datetime.now()  \n    end_date = datetime.now() \n    category = None\n\n    filtered_expenses = Expences(user_expences, category, start_date, end_date)\n\n    update.message.reply_text(\"Filtered expenses:\")\n    for expense in filtered_expenses:\n        update.message.reply_text(str(expense))\n\nasync def remove_record(update: Update, context: CallbackContext) -> None:\n    user_id = update.message.from_user.id\n\n    if not user_incomes.get(user_id) or not user_expences.get(user_id):\n        await update.message.reply_text(\"You dont have records to remove\")\n        return\n\n    try:\n        remove_idx = int(context.args[0]) - 1\n        record_e = user_expences[user_id].pop(remove_idx)\n        record_i = user_incomes[user_id].pop(remove_idx)\n        await update.message.reply_text(f\"Task: {record_e} {record_i} removed\")\n    except (ValueError, IndexError):\n        await update.message.reply_text(\"You entered invalid index\")\n\ndef run() -> None:\n    app = ApplicationBuilder().token(TOKEN_BOT).build()\n    logging.info(\"build success\")\n\n    app.add_handler(CommandHandler(\"start\", start))\n    app.add_handler(CommandHandler(\"help\", start))\n    app.add_handler(CommandHandler(\"add_expense\", add_expense))\n    app.add_handler(CommandHandler(\"add_income\", add_income))\n    app.add_handler(CommandHandler(\"Exp_cat\", list_expences_category))\n    app.add_handler(CommandHandler(\"Inc_cat\", list_income_category))\n    app.add_handler(CommandHandler(\"Filter_exp\", filtered_expences))\n    app.add_handler(CommandHandler(\"Del_record\", remove_record))\n    app.run_polling()\n\nif __name__ == \"__main__\":\n    run()\n\n\n"}